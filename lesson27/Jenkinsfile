pipeline {
    agent any

    environment {
        mavenHome = tool 'Maven 3.9.9' 
        scannerHome = tool 'SonarScanner' 
    }

    stages {
        stage('Check Maven Version') {
            steps {
                echo "Checking Maven version"
                sh "${mavenHome}/bin/mvn -v"
            }
        }

        stage('Build and Deploy') {
            parallel {
                stage('Hello World') {
                    stages {
                        stage('Build Hello World') {
                            steps {
                                echo "Building Hello World!"
                                sh "${mavenHome}/bin/mvn clean compile -f lesson27/hello-world/pom.xml"
                            }
                        }
                        stage('Clean Sonar Cache - Hello World') {
                            steps {
                                echo "Cleaning Sonar cache for Hello World"
                                sh 'rm -rf lesson27/hello-world/.scannerwork'
                            }
                        }
                        stage('SonarQube Analysis - Hello World') {
                            steps {
                                echo "Running SonarQube Analysis for Hello World"
                                lock(resource: 'sonar-analysis') {
                                    withSonarQubeEnv('SonarQube') {
                                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=hello-world -Dsonar.java.binaries=lesson27/hello-world/target/classes -Dsonar.inclusions=lesson27/hello-world/** -X"
                                    }
                                }
                            }
                        }
                        stage('Quality Gate - Hello World') {
                            steps {
                                echo "Checking Quality Gate for Hello World"
                                timeout(time: 1, unit: 'HOURS') {
                                    def qg = waitForQualityGate abortPipeline: true
                                    if (qg.status != 'OK') {
                                        error "Quality Gate failed: ${qg.status}"
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Hello Jenkins') {
                    stages {
                        stage('Build Hello Jenkins') {
                            steps {
                                echo "Building Hello Jenkins!"
                                sh "${mavenHome}/bin/mvn clean compile -f lesson27/hello-jenkins/pom.xml"
                            }
                        }
                        stage('Clean Sonar Cache - Hello Jenkins') {
                            steps {
                                echo "Cleaning Sonar cache for Hello Jenkins"
                                sh 'rm -rf lesson27/hello-jenkins/.scannerwork'
                            }
                        }
                        stage('SonarQube Analysis - Hello Jenkins') {
                            steps {
                                echo "Running SonarQube Analysis for Hello Jenkins"
                                lock(resource: 'sonar-analysis') {
                                    withSonarQubeEnv('SonarQube') {
                                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=hello-jenkins -Dsonar.java.binaries=lesson27/hello-jenkins/target/classes -Dsonar.inclusions=lesson27/hello-jenkins/** -X"
                                    }
                                }
                            }
                        }
                        stage('Quality Gate - Hello Jenkins') {
                            steps {
                                echo "Checking Quality Gate for Hello Jenkins"
                                timeout(time: 1, unit: 'HOURS') {
                                    def qg = waitForQualityGate abortPipeline: true
                                    if (qg.status != 'OK') {
                                        error "Quality Gate failed: ${qg.status}"
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Hello Devops') {
                    stages {
                        stage('Build Hello Devops') {
                            steps {
                                echo "Building Hello Devops!"
                                sh "${mavenHome}/bin/mvn clean compile -f lesson27/hello-devops/pom.xml"
                            }
                        }
                        stage('Clean Sonar Cache - Hello Devops') {
                            steps {
                                echo "Cleaning Sonar cache for Hello Devops"
                                sh 'rm -rf lesson27/hello-devops/.scannerwork'
                            }
                        }
                        stage('SonarQube Analysis - Hello Devops') {
                            steps {
                                echo "Running SonarQube Analysis for Hello Devops"
                                lock(resource: 'sonar-analysis') {
                                    withSonarQubeEnv('SonarQube') {
                                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=hello-devops -Dsonar.java.binaries=lesson27/hello-devops/target/classes -Dsonar.inclusions=lesson27/hello-devops/** -X"
                                    }
                                }
                            }
                        }
                        stage('Quality Gate - Hello Devops') {
                            steps {
                                echo "Checking Quality Gate for Hello Devops"
                                timeout(time: 1, unit: 'HOURS') {
                                    def qg = waitForQualityGate abortPipeline: true
                                    if (qg.status != 'OK') {
                                        error "Quality Gate failed: ${qg.status}"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}